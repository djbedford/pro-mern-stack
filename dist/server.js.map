{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport {MongoClient} from 'mongodb';\nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';\nimport Issue from './issue.js';\n\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nif (process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n    const bundler = webpack(config);\n\n    app.use(webpackDevMiddleware(bundler, {noInfo: true}));\n    app.use(webpackHotMiddleware(bundler, {log: console.log}));\n}\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = {total_count: issues.length};\n\n        res.json({\n            _metadata: metadata,\n            records: issues\n        });\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({message: `Internal Server Error: ${error}`});\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n\n    newIssue.created = new Date();\n\n    if (!newIssue.status) {\n        newIssue.status = 'New';\n    }\n\n    const err = Issue.validateIssue(newIssue);\n\n    if (err) {\n        res.status(422).json({message: `Invalid request: ${err}`});\n        return;\n    }\n\n    db.collection('issues').insertOne(newIssue).then(result =>\n        db.collection('issues').find({_id: result.insertedId}).limit(1).next()\n    ).then(newIssue => {\n        res.json(newIssue);\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({message: `Internal Server Error: ${error}`});\n    });\n});\n\nlet db;\n\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n    db = connection;\n\n    app.listen(3000, () => {\n        console.log('App start on port 3000.');\n    });\n}).catch(error => {\n    console.log('ERROR', error);\n});\n"]}